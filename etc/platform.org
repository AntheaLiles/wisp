* Wisp as a Platform
** What?
   Let's say you write a program on [[https://wisp.town][wisp.town]].  Maybe it's like a simple
   web app server.  It defines behavior of routes in terms of a web
   server interface.

   Now you want to run it.  You should be able to just press a run button
   and get a public URL.  Same thing but for a bot that lives on Discord
   or Telegram.

   And then you should be able to attach to that running instance and see
   what it's doing, change its code on the fly, etc.

   On the server, it will run as a WebAssembly thread in some runtime.
   Wasmer, Deno, Wasmtime...  Elixir?

   I think Deno will be easiest to get started with.

** Suspending and Resuming
   The platform should be able to suspend and resume Wisp processes,
   and transport them between nodes as seamlessly as possible.

   Of course this is made possible with serializable continuations.

   Pervasive use of restartable conditions also seems relevant.

   Maybe there's a dashboard where you can see all your conditions and
   do bulk restart actions.

** Basic Operation
   So I'll start a Deno service on Wisp.Town.  It needs some data
   persistence.  We'll have user accounts, right?

   OK, I've got Auth0 working in the single-page app.  Now I need to
   be able to do authenticated API calls into some kind of server.

   I would really like to use Elixir for this stuff.  But I couldn't
   immediately get the Wasmer binding to work, and I don't know if I
   really trust it.

   So why do I really need Wasmer inside the BEAM?  I mean, it would
   be sweet, it seems appropriate... But I can also use
   Unix processes.

   OK, whatever.  Let's use Deno.

   I just need to start a server.  It needs to load state from
   a database.  What is that state?

   There are a bunch of "programs."  But now we get into ontology.
   Like, I suppose there are both source code repositories and
   running instances.

   Well, what's in the database?  I suppose there are images, that is,
   "tapes."  It's a tape collection.  Tapes are blobs, files.
   Let's hypothesize that tapes are content-addressed and immutable.

   Presumably we want to continue some set of tapes when we boot.
   So there's a set of active tapes.  They will have been suspended in
   some basically unknown state, though always in terms of Wisp steps.

** Interlude on Replication
   Wait, interlude.  Transactions.  Replication.  Can we do this with
   Wisp state?  As if every time the runtime takes a step, it emits a
   little transaction, such that the system state is determined by the
   sequence of transactions.  Yeah, like Urbit.  Or Postgres, or
   whatever.  This isn't so exotic.

   What would it mean?  Well, you could synchronize state between
   different computers.  At least read replication would be easy.
   The main replica on the server does all the I/O or whatever.
   It broadcasts transactions to its clients who can then locally
   query the state, evaluate expressions, etc.

   Basically we're saying the Wisp state is linearizable.  We can even
   use hashing for integrity: hash the transaction sequence.

   One reason we can do this is that Wisp doesn't use any system
   pointers.  It's all just indices.  So even garbage collection is
   totally deterministic if you specify an ordered list of roots.

   Of course the server might execute a thousand steps and send them
   bundled in one big transaction.

   We could even enumerate the transaction types.  Well, it depends on
   how granular you want to be.  Here's a minimal set:

     - new: tag val...
     - put: tag ptr val...
     - v08: bytes
     - v32: words
     - set: tag col ptr val
     - era: roots
     - pkg: pkg
     - rnd

   This is actually really clean.

   I see one issue: different clients might want different roots, like
   if you have different browsers viewing different objects.  But OK,
   you can just try to tell the server to add them to the root set.
   Maybe it associates a root set with each client.

** Implementation
   So what's the easiest path towards implementing this?

   It kind of feels like it needs Zig intervention.

   Basically, the `Heap` needs to learn to emit events to a log.

   Then we need to be able to run a `Heap` in replica mode.  Such a
   heap is only updated via events received from a source heap.

   Now we can have a JavaScript driver that streams events on a
   WebSocket and tells the Zig `Heap` to apply them.

   How does the server work?  It's a basic WebSocket thing, right?

** Remote Protocol
   OK, I'll definitely need a remote protocol for accessing
   Wisp instances.

   How do I use the Wisp instance now, in the IDE?

*** System values
    This is pretty simple: it's static data.  We do load it with a
    WASM call, for convenience, but it could also be hardcoded into
    the client SDK.  Let's say we'll just receive it when we connect.

*** Tag values
    Same as system values.

*** Loading rows
    This could just be an API call, but that's inefficient because
    we'll always be loading more than one row.

    So that's the main thing.  Let's say we're the debugger.  We want
    to render the current continuation.  That's probably, like, 20
    rows just for the continuation structures.  Then each of those
    will load a bunch more rows: symbols, functions, etc.  Not to
    mention lists.

    We could have an API call that loads every pointer that's
    reachable from a root.  Except that this could easily end up
    pulling in enormous amounts of stuff we don't really need.

    I mean, most roots will point to the WISP package which contains a
    lot of symbols and functions...  Now, we might want all of that
    stuff...  The user wants to be able to click a function to learn
    about it...

    But that stuff should be lazily loaded.

    So this is like a GraphQL kind of thing, right?

    Another thing: we have mutation.

    Like, when you run DEFUN, the package changes.  Or maybe just a
    symbol in the package.  How will the IDE know?  Does it subscribe
    to things somehow?

    I mean, it could.  The server could maintain a set of watched
    pointers.  That's similar to maintaining a set of roots for
    garbage collection, which we will also need.
