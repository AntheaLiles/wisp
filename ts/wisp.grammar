@top Program { form* }

@skip { spaces | newline | Comment }

form[@isGroup=Form] {
  Symbol |
  String |
  Integer |

  Defun | Let | Lambda |
  Compound
}

kw<term> {
  @specialize[@name={term}]<Symbol, term>
}

Defun { "(" kw<"defun"> Symbol form form* ")" }
Let { "(" kw<"let"> form* ")" }
Lambda { "(" kw<"lambda"> form* ")" }

Compound { "(" form* ")" }

@tokens {
  spaces { $[ ]+ }
  newline { $[\n] }

  Comment { ";" ![\n]* }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  Symbol { identifierChar (identifierChar | std.digit)* }

  @precedence { spaces, newline, Symbol }

  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }

  Integer { std.digit+ }

  "(" ")"
}

@detectDelim
