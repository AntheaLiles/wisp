@top Program { form* }

@skip { spaces | newline | Comment }

form[@isGroup=Form] {
  Symbol |
  Key |
  String |
  Integer |
  Quote |
  Defun | Let | Lambda | List | Run |
  Compound
}

kw<term> {
  @specialize[@name={term}]<Symbol, term>
}

Key { '~' Date '.' ZB32 }

Defun { "(" kw<"defun"> Symbol form form* ")" }
Let { "(" kw<"let"> form* ")" }
Lambda { "(" kw<"lambda"> form* ")" }
List { "(" kw<"list"> form* ")" }
Run { "(" kw<"run"> form* ")" }

Quote { "'" form }

Compound { "(" form* ")" }

@tokens {
  spaces { $[ ]+ }
  newline { $[\n] }

  Comment { ";" ![\n]* }

  identifierChar { std.asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  Symbol { identifierChar (identifierChar | std.digit)* }

  ZB32 {
    ($[ybndrfg8ejkmcpqxot1uwisza345h769] |
     $[YBNDRFG8EJKMCPQXOT1UWISZA345H769])+
  }

  @precedence { spaces, newline, Symbol }

  String {
    '"' (![\\\n"] | "\\" _)* '"'?
  }

  Integer { std.digit+ }

  Date { Year Month Day }
  Year { $[0-9] $[0-9] $[0-9] $[0-9] }
  Month { $[0-1] $[0-9] }
  Day { $[0-3] $[0-9] }

  "(" ")" "'"
}

@detectDelim
